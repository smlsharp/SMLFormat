## Copyright (C) 2020 Takayuki Goto

POLYML         := poly
POLYMLC        := polyc
POLYMLFLAGS    := -q --error-exit \
                  --eval 'PolyML.suffixes := ".sig"::".ppg.sml"::(!PolyML.suffixes)' \
                  --use ./script/load.sml

MLLEX          := mllex-polyml
MLYACC         := mlyacc-polyml
SMLDOC         := smldoc
SMLDOC_ARGFILE := formatlib/smldoc.cfg

# install directories
PREFIX         := /usr/local/polyml
BINDIR         := $(PREFIX)/bin
LIBDIR         := $(PREFIX)/lib
DOCDIR         := $(PREFIX)/doc

SMLFORMAT      := bin/smlformat
SMLFORMAT_VER  := 1.0.0
SMLFORMAT_LIB  := lib/smlformat-lib/smlformat-lib-$(SMLFORMAT_VER).poly

# dependencies
MLYACC_LIB     := $(LIBDIR)/mlyacc-lib/mlyacc-lib-1.0.0.poly
SMLNJ_UTIL_LIB := $(LIBDIR)/smlnj-lib-110.82/smlnj-util-lib-0.0.1.poly
SMLUNIT_LIB    := $(LIBDIR)/smlunit-lib/smlunit-lib.poly

TEST_SRC          := \
                  formatlib/test/BasicFormattersTest0001.sml \
                  formatlib/test/call-main.sml \
                  formatlib/test/load.sml \
                  formatlib/test/PPLibTest.sml \
                  formatlib/test/PrinterParameterTest0001.sml \
                  formatlib/test/PrinterParameterTest0002.sml \
                  formatlib/test/SMLFormatTest0001.sml \
                  formatlib/test/SMLFormatTest0002.sml \
                  formatlib/test/SMLFormatTest0003.sml \
                  formatlib/test/SMLFormatTest0004.sml \
                  formatlib/test/SMLFormatTest0005.sml \
                  formatlib/test/SMLFormatTest0006.sml \
                  formatlib/test/SMLFormatTest0007.sml \
                  formatlib/test/SMLFormatTest0008.sml \
                  formatlib/test/SMLFormatTest0009.sml \
                  formatlib/test/SMLFormatTest0010.sml \
                  formatlib/test/SMLFormatTest0011.sml \
                  formatlib/test/SMLFormatTestUtil.sml \
                  formatlib/test/TestMain.sml

SMLFORMAT_LIB_SRC := \
                  formatlib/main/export.sml \
                  formatlib/main/ml_bind.sml \
                  formatlib/main/AssocResolver.sml \
                  formatlib/main/BASIC_FORMATTERS.sig \
                  formatlib/main/BasicFormatters.sml \
                  formatlib/main/FORMAT_EXPRESSION.sig \
                  formatlib/main/FormatExpression.sml \
                  formatlib/main/FormatExpressionTypes.sml \
                  formatlib/main/PreProcessedExpression.sml \
                  formatlib/main/PreProcessor.sml \
                  formatlib/main/PrettyPrinter.sml \
                  formatlib/main/PRINTER_PARAMETER.sig \
                  formatlib/main/PrinterParameter.sml \
                  formatlib/main/SMLFORMAT.sig \
                  formatlib/main/SMLFormat.sml \
                  formatlib/main/Truncator.sml

SMLFORMAT_SRC  := generator/main/Utility.sml \
                  generator/main/ErrorQueue.sml \
                  generator/main/FormatTemplate.sml \
                  generator/main/AST.sig \
                  generator/main/Ast.sml \
                  generator/main/ASTUTIL.sig \
                  generator/main/AstUtil.sml \
                  generator/main/Constants_MLton.sml \
                  generator/main/ml.grm.sig \
                  generator/main/ml.grm.sml \
                  generator/main/TokenTable.sml \
                  generator/main/ml.lex.sml \
                  generator/main/MLPARSER.sig \
                  generator/main/MLParser.sml \
                  generator/main/FORMATTER_GENERATOR.sig \
                  generator/main/FormatterGenerator.sml \
                  generator/main/BasicFormattersEnv.sml \
                  generator/main/PPGMain.sml \
                  generator/main/Main.sml \
                  generator/main/Main_PolyML.sml

MLPARSER_SRC   := example/MLParser/Absyn.ppg.sml \
                  example/MLParser/call-main.sml \
                  example/MLParser/Main.sml \
                  example/MLParser/ml.grm.sig \
                  example/MLParser/ml.grm.sml \
                  example/MLParser/ml.lex.sml

FORMAT_EXPR_PARSER_SRC := \
                  example/FormatExpressionParser/Ast.sml \
                  example/FormatExpressionParser/Lexer.lex.sml \
                  example/FormatExpressionParser/Parser.grm.sig \
                  example/FormatExpressionParser/Parser.grm.sml \
                  example/FormatExpressionParser/Main.sml

OVERVIEW_SRC   := example/Overview/Examples.ppg.sml \
                  example/Overview/Types.ppg.sml \
                  example/Overview/ml_bind.sml

TEST           := bin/formatlib-test

EXAMPLES       := bin/mlparser \
                  bin/fmt_expr_parser \
                  bin/overview.poly


define build-module
@echo "  [POLYML] $@"
echo "" | $(POLYML) $(POLYMLFLAGS) \
	$(foreach dep,$(3),--eval 'PolyML.loadModule "$(dep)"') \
	--eval 'load "$(1)/load.sml"' \
	--eval 'PolyML.export ("$@", $2)'
endef


all: smlformat smlformat-lib


.PHONY: smlformat
smlformat: smlformat-nodoc doc


.PHONY: smlformat-lib
smlformat-lib: smlformat-lib-nodoc doc


.PHONY: smlformat-nodoc
smlformat-nodoc: $(SMLFORMAT)


.PHONY: smlformat-lib-nodoc
smlformat-lib-nodoc: $(SMLFORMAT_LIB)


$(SMLFORMAT) $(TEST) $(filter-out bin/overview.poly,$(EXAMPLES)): bin/%: obj/%.o
	@echo "  [POLYMLC] $@"
	@$(POLYMLC) -o $@ $^


$(SMLFORMAT_LIB): $(SMLNJ_UTIL_LIB) $(SMLFORMAT_LIB_SRC)
	@echo "  [POLYML] $@"
	@echo "" | $(POLYML) $(POLYMLFLAGS) \
		--eval 'PolyML.loadModule "$<"' \
		--eval 'PolyML.make "formatlib/main"' \
		--use formatlib/main/export.sml \
		--eval 'PolyML.SaveState.saveModule ("$@", SMLFormat)'


obj/smlformat.o: $(MLYACC_LIB) $(SMLFORMAT_SRC)
	$(call build-module,generator/main,Main.main,$<)


obj/formatlib-test.o: $(SMLFORMAT_LIB) $(SMLUNIT_LIB) $(TEST_SRC)
	$(call build-module,formatlib/test,TestMain.test,$(SMLUNIT_LIB) $(SMLFORMAT_LIB))


.PHONY: install-nodoc
install-nodoc: $(SMLFORMAT) $(SMLFORMAT_LIB)
	install -D -m 755 -t $(BINDIR)               $(SMLFORMAT)
	install -D -m 644 -t $(LIBDIR)/smlformat-lib $(SMLFORMAT_LIB)


.PHONY: install
install: install-doc install-nodoc


.PHONY: doc
doc:
	@echo "  [SMLDoc]"
	@$(RM) -r doc/api
	@install -d doc/api
	@$(SMLDOC) -c UTF-8 -a $(SMLDOC_ARGFILE) -d doc/api


.PHONY: install-doc
install-doc: doc
	@install -d $(DOCDIR)
	@cp -prT doc $(DOCDIR)/smlformat-lib
	@echo "================================================================"
	@echo "Generated API Documents of SMLFormat"
	@echo "\t$(DOCDIR)"
	@echo "================================================================"


.PHONY: test
test: $(TEST)
	./$<


%.lex.sml: %.lex
	@echo "  [MLLEX] $<"
	@$(MLLEX) $<


%.grm.sml %.grm.sig %.grm.desc: %.grm
	@echo "  [MLYACC] $<"
	@$(MLYACC) $<


%.ppg.sml: %.ppg $(SMLFORMAT)
	@echo "  [SMLFORMAT] $<"
	@$(SMLFORMAT) $<


define build-example
@echo "  [POLYML] $@"
@echo "" | $(POLYML) $(POLYMLFLAGS) \
	$(foreach dep,$(2),--eval 'PolyML.loadModule "$(dep)"') \
	--eval 'PolyML.loadModule "$(SMLFORMAT_LIB)"' \
	--eval 'load "example/$(1)/load.sml"' \
	--eval 'PolyML.export ("$@", Main.main)'
endef

obj/mlparser.o: $(MLYACC_LIB) $(SMLFORMAT_LIB) $(MLPARSER_SRC)
	$(call build-example,MLParser,$<)

obj/fmt_expr_parser.o: $(MLYACC_LIB) $(SMLFORMAT_LIB) $(FORMAT_EXPR_PARSER_SRC)
	$(call build-example,FormatExpressionParser,$<)

bin/overview.poly: $(SMLFORMAT_LIB) $(OVERVIEW_SRC)
	@echo "  [POLYML] $@"
	@echo "" | $(POLYML) $(POLYMLFLAGS) \
		--eval 'PolyML.loadModule "$<"' \
		--eval 'PolyML.make "example/Overview"' \
		--use example/Overview/export.sml \
		--eval 'PolyML.SaveState.saveModule ("$@", OverviewExample)'


.PHONY: example
example: $(EXAMPLES)


.PHONY: clean
clean:
	-$(RM) $(SMLFORMAT)
	-$(RM) $(SMLFORMAT_LIB)
	-$(RM) $(TEST)
	-$(RM) $(EXAMPLES)
	-$(RM) -r doc/api
	-$(RM) obj/*.o
	-$(RM) generator/main/ml.lex.sml
	-$(RM) generator/main/ml.grm.sig
	-$(RM) generator/main/ml.grm.sml
	-$(RM) generator/main/ml.grm.desc
	-$(RM) example/MLParser/ml.grm.sig
	-$(RM) example/MLParser/ml.grm.sml
	-$(RM) example/MLParser/ml.grm.desc
	-$(RM) example/MLParser/ml.lex.sml
	-$(RM) example/FormatExpressionParser/Parser.grm.sig
	-$(RM) example/FormatExpressionParser/Parser.grm.sml
	-$(RM) example/FormatExpressionParser/Parser.grm.desc
	-$(RM) example/FormatExpressionParser/Lexer.lex.sml
	-$(RM) example/Overview/Types.ppg.sml
	-$(RM) example/Overview/Examples.ppg.sml


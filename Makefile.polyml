## Copyright (C) 2020 Takayuki Goto

POLYML         := poly
POLYMLC        := polyc
POLYMLFLAGS    := -q --error-exit \
                  --eval 'PolyML.suffixes := ".sig"::(!PolyML.suffixes)' \
                  --use ./script/load.sml

POLYML_DIR     := $(HOME)/.polyml
POLYML_LIB_DIR := $(POLYML_DIR)/lib

MLLEX          := mllex-polyml
MLYACC         := mlyacc-polyml
SMLFORMAT      := bin/smlformat
SMLFORMATLIB   := build/smlformatlib.poly

SMLFORMAT_SRC  := generator/main/Utility.sml \
                  generator/main/ErrorQueue.sml \
                  generator/main/FormatTemplate.sml \
                  generator/main/AST.sig \
                  generator/main/Ast.sml \
                  generator/main/ASTUTIL.sig \
                  generator/main/AstUtil.sml \
                  generator/main/Constants_MLton.sml \
                  generator/main/ml.grm.sig \
                  generator/main/ml.grm.sml \
                  generator/main/TokenTable.sml \
                  generator/main/ml.lex.sml \
                  generator/main/MLPARSER.sig \
                  generator/main/MLParser.sml \
                  generator/main/FORMATTER_GENERATOR.sig \
                  generator/main/FormatterGenerator.sml \
                  generator/main/BasicFormattersEnv.sml \
                  generator/main/PPGMain.sml \
                  generator/main/Main.sml \
                  generator/main/Main_PolyML.sml

MLPARSER_SRC   := example/MLParser/Absyn.ppg.sml \
                  example/MLParser/call-main.sml \
                  example/MLParser/Main.sml \
                  example/MLParser/ml.grm.sig \
                  example/MLParser/ml.grm.sml \
                  example/MLParser/ml.lex.sml

FORMAT_EXPR_PARSER_SRC := \
                  example/FormatExpressionParser/Ast.sml \
                  example/FormatExpressionParser/Lexer.lex.sml \
                  example/FormatExpressionParser/Parser.grm.sig \
                  example/FormatExpressionParser/Parser.grm.sml \
                  example/FormatExpressionParser/Main.sml

OVERVIEW_SRC    := \
                  example/Overview/Examples.ppg.sml \
                  example/Overview/Types.ppg.sml


TARGET   := bin/smlformat \
            build/smlformatlib.poly

TEST     := bin/formatlib-test

EXAMPLES := bin/mlparser \
            bin/fmt_expr_parser \
            bin/overview


define build-module
@echo "  [POLYML] $@"
@echo "" | $(POLYML) $(POLYMLFLAGS) \
	$(foreach dep,$(3),--eval 'PolyML.loadModule "$(dep)"') \
	--eval 'load "$(1)/load.sml"' \
	--eval 'PolyML.export ("$@", $2)'
endef


all: $(TARGET) test example


$(SMLFORMATLIB): $(SMLNJLIB) $(wildcard ./formatlib/main/*)
	@echo "  [POLYML] $@"
	@echo "" | $(POLYML) $(POLYMLFLAGS) \
		--eval 'PolyML.loadModule "$<"' \
		--eval 'PolyML.make "formatlib/main"' \
		--use formatlib/main/export.sml \
		--eval 'PolyML.SaveState.saveModule ("$@", SMLFormat)'


build/smlformat.o: $(MLYACCLIB) $(SMLFORMAT_SRC)
	$(call build-module,generator/main,Main.main,$<)


build/formatlib-test.o: $(SMLFORMATLIB) $(SMLUNITLIB)
	$(call build-module,formatlib/test,TestMain.test,$(SMLUNITLIB) $(SMLFORMATLIB))


.PHONY: test
test: $(TEST)
	./$<


%.lex.sml: %.lex
	@echo "  [MLLEX] $<"
	@$(MLLEX) $<


%.grm.sml %.grm.sig %.grm.desc: %.grm
	@echo "  [MLYACC] $<"
	@$(MLYACC) $<


%.ppg.sml: %.ppg $(SMLFORMAT)
	@echo "  [SMLFORMAT] $<"
	@$(SMLFORMAT) $<


define build-example
@echo "  [POLYML] $@"
@echo "" | $(POLYML) $(POLYMLFLAGS) \
	$(foreach dep,$(2),--eval 'PolyML.loadModule "$(dep)"') \
	--eval 'load "example/$(1)/load.sml"' \
	--eval 'PolyML.export ("$@", Main.main)'
endef

build/mlparser.o: $(MLYACCLIB) $(SMLFORMATLIB) $(MLPARSER_SRC)
	$(call build-example,MLParser,$< $(SMLFORMATLIB))

build/fmt_expr_parser.o: $(MLYACCLIB) $(SMLFORMATLIB) $(FORMAT_EXPR_PARSER_SRC)
	$(call build-example,FormatExpressionParser,$< $(SMLFORMATLIB))

build/overview.o: $(MLYACCLIB) $(SMLFORMATLIB) $(OVERVIEW_SRC)
	$(call build-example,Overview,$< $(SMLFORMATLIB))


$(SMLFORMAT) $(TEST) $(EXAMPLES): bin/%: build/%.o
	@echo "  [POLYMLC] $@"
	@$(POLYMLC) -o $@ $^


.PHONY: example
example: $(EXAMPLES)


.PHONY: clean
clean:
	-$(RM) $(TARGET)
	-$(RM) $(EXAMPLES)
	-$(RM) $(addprefix build/,$(notdir $(EXAMPLES:=.o)))
	-$(RM) build/smlformat.o
	-$(RM) generator/main/ml.lex.sml
	-$(RM) $(wildcard generator/main/ml.grm.*)
	-$(RM) build/mlparser.o
	-$(RM) $(wildcard example/MLParser/ml.grm.*)
	-$(RM) example/MLParser/ml.lex.sml

